#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Install parameters are automatically saved as settings
#
# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# ... etc
#
# Resources defined in the manifest are provisioned prior to this script
# and corresponding settings are also available, such as:
# - $install_dir
# - $port
# - $db_name
# ...

#
# $app is the app id (i.e. 'example' for first install, 
# or 'example__2', '__3', ... for multi-instance installs)
#

#=================================================
# APP "BUILD" (DEPLOYING SOURCES, VENV, COMPILING ETC)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file manifest.toml

# Download, check integrity, uncompress and patch the source from manifest.toml
ynh_setup_source --dest_dir="$install_dir"

# Create required directories
mkdir -p "$data_dir"
mkdir -p "/var/log/$app"

# $install_dir will automatically be initialized with some decent 
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step
chown -R $app:www-data "$install_dir"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression --message="Adding system configurations related to $app..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

# Create a dedicated systemd config
ynh_add_systemd_config

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --logfile="/var/log/$app/$app.log"

yunohost service add $app --description="SABnzbd Usenet Client" --log="/var/log/$app/$app.log"

#=================================================
# SPECIFIC SETUP
#=================================================
# INSTALL PYTHON DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing Python dependencies..." --weight=1

set -x
set -e

DIR="~/venv-sabnzbd"
eval DIR=$DIR

SABDIR="~/git/sabnzbd"
eval SABDIR=$SABDIR
if [ ! -d "$SABDIR" ]; then
  echo $DIR "does not exist."
  exit;
fi

SABEXE=$SABDIR"/SABnzbd.py"
if [ ! -f "$SABEXE" ]; then
    echo "$SABEXE not found!"
    exit;
fi

SABREQ=$SABDIR"/requirements.txt"
if [ ! -f "$SABREQ" ]; then
    echo "$SABREQ not found!"
    exit;
fi

# Check python3-venv is installed:
python3 -c "import venv" 2>&1
#echo $?
if [ $? -eq 1 ]; then
    echo "Install python3-venv first!";
    exit;
fi
echo "Good: python3-venv is installed"

if [ ! -d "$DIR" ]; then
  echo $DIR "does not exist. Creating and filling it.";
  python3 -m venv "$DIR";
  source "$DIR"/bin/activate; # activate the venv
 # to do: check/install python module wheel

  python3 -m pip install -r "$SABREQ";
  python3 "$SABEXE";
else
  source "$DIR"/bin/activate # activate the venv
  python3 "$SABEXE";
  
fi

#pushd $install_dir
#	python3 -m venv venv
#	venv/bin/pip install --upgrade pip
#	venv/bin/pip install -r requirements.txt
#	venv/bin/pybabel compile -d locales/
#	mkdir -p /var/log/$app
#	chown -R $app:www-data /var/log/$app
#	chmod o-rwx /var/log/$app
#	cat <<EOF >> wsgi.py 

#from server import app


if __name__ == "__main__":
    app.run()
EOF
popd

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

ynh_add_config --template="../conf/SabNZBD.conf" --destination="$install_dir/.config/SabNZBD/SabNZBD.conf"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
chmod 600 "$install_dir/.config/SabNZBD/SabNZBD/conf"
chown $app:$app "$install_dir/.config/"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/some_config_file"
### ynh_store_file_checksum --file="$install_dir/some_config_file"

#=================================================
# YUNOHOST MULTIMEDIA INTEGRATION
#=================================================
ynh_script_progression --message="Adding multimedia directories..." --weight=6

# Build YunoHost multimedia directories
ynh_multimedia_build_main_dir

ynh_multimedia_addfolder --source_dir="$data_dir" --dest_dir="share/Usenets"
#=================================================
# SETUP APPLICATION WITH CURL
#=================================================

### Use these lines only if the app installation needs to be finalized through
### web forms. We generally don't want to ask the final user,
### so we're going to use curl to automatically fill the fields and submit the
### forms.

# Installation with curl
ynh_script_progression --message="Finalizing installation..." --weight=1
ynh_local_curl "/INSTALL_PATH" "key1=value1" "key2=value2" "key3=value3"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SET PERMISSIONS
#=================================================
ynh_script_progression --message="Setting up permissions..." --weight=1

# Set permissions
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"
chown -R $app:www-data "/var/log/$app"

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chmod -R 750 "$data_dir"
chmod -R 750 "/var/log/$app"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting SABnzbd service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last

#=================================================
# PYTHON VIRTUALENV SETUP
#=================================================
ynh_script_progression --message="Setting up Python virtualenv..." --weight=3

# Create virtualenv
python3 -m venv "$install_dir/venv"

# Activate virtualenv and install dependencies
pushd "$install_dir"
    # Upgrade pip and install wheel
    "$install_dir/venv/bin/pip" install --upgrade pip wheel setuptools

    # Install build dependencies for sabctools
    ynh_package_install python3-dev python3-setuptools libffi-dev libssl-dev

    # Install all Python dependencies
    "$install_dir/venv/bin/pip" install --no-cache-dir -r requirements.txt

    # Enable multi-language support
    "$install_dir/venv/bin/python3" tools/make_mo.py
popd
